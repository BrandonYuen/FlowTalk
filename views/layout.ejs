<!DOCTYPE html>
<html>
  <head>
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/min/production.min.css">
    <!--STYLES END-->
  </head>

  <body>

	<style type="text/css">
		body {
			display: flex;
			min-height: 100vh;
			flex-direction: column;
		}

		main {
			flex: 1 0 auto;
		}
	</style>

	<header>
  		<div class="navbar-fixed">
			<nav>
				<div class="nav-wrapper">
					<a href="#" class="brand-logo center">FlowTalk</a>
					<ul id="nav-mobile" class="left">
						<% if (req.session.authenticated) { %>
							<li><a href="/"><b>Home</b></a></li>
							<% if (req.session.isAdmin == true) { %>
								<li><a href="admin"><b>Admin Panel</b></a></li>
							<% } %>
						</ul>
						<% } else { %>
							<li><a href="login"><b>Login</b></a></li>
							<li><a href="signup"><b>Signup</b></a></li>
						<% } %>
					<% if (req.session.authenticated) { %>
						<ul class="right">
							<li><a href="logout" class="waves-effect waves-light btn"><b>Logout</b> <i class="material-icons right">exit_to_app</i></a></li>
						</ul>
					<% } %>
				</div>
			</nav>
		</div>

	</header>

	<main class="grey lighten-4">
	    <div class="container"><%- body %></div>
    </main>

    <footer class="page-footer grey darken-2" >
        <div class="container">
            <div class="row">
                <div class="col l4 s12"></div>
            </div>
        </div>

        <div class="footer-copyright grey darken-3">
            <div class="container">
                Â© 2017 Brandon Yuen, All rights reserved. <a class="grey-text text-lighten-4 right"
                    href="https://github.com/BrandonYuen/FlowTalk">Source Code (Github)</a>
            </div>
        </div>
	</footer>

	<!-- Pass local variables on to client-side variables -->
	<script>
		var _csrf = "<%= _csrf %>";
	</script>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/min/production.min.js"></script>
    <!--SCRIPTS END-->
	<%- blocks.localScripts %>
  </body>
</html>
